import time
import json
import os
from datetime import date
from utils import load_json, save_json, SKLAD_FILE, CLIENTS_DIR, ORDERS_DIR, validate_id

# ---------- –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π (–ó–∞–∫–∞–∑—ã) -------------


def create_order(order_id, client_id, items):        # ----------- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ID
    if not validate_id(order_id, "ID –∑–∞–∫–∞–∑–∞"):
        return
        
    sklad = load_json(SKLAD_FILE)
    client_file = CLIENTS_DIR / f"{client_id}.json"

    if not client_file.exists():
        time.sleep(0.5)
        print("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    client = load_json(client_file)
    total = 0
    order_items = []

    for pid, qty in items.items():
        if pid not in sklad:
            time.sleep(0.5)
            print(f"‚ùå –¢–æ–≤–∞—Ä —Å ID {pid} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.")
            return
        if sklad[pid]["quantity"] < qty:
            time.sleep(0.5)
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ {sklad[pid]["name"]} (–Ω–∞ —Å–∫–ª–∞–¥–µ {sklad[pid]["quantity"]}).")
            return
        
        price = sklad[pid]["price"] * qty
        total += price
        order_items.append({
            "product_id": pid,
            "quantity": qty,
            "price": sklad[pid]["price"]
        })
        sklad[pid]["quantity"] -= qty

    save_json(SKLAD_FILE, sklad)

    order = {
        "order_id": order_id,
        "client_id": client_id,
        "date": str(date.today()), 
        "items": order_items,
        "total": total,
        "status": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
    }

    save_json(ORDERS_DIR / f"{order_id}.json", order)

    client["orders"].append(order_id)
    save_json(client_file, client)

    time.sleep(0.5)
    print(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} —Å–æ–∑–¥–∞–Ω. –û–±—â–∞—è —Å—É–º–º–∞: {total}.")

def show_orders():
    files = list(ORDERS_DIR.glob("*.json"))
    if not files:
        time.sleep(0.5)
        print("‚ùå –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    
    print("\n---------–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤---------")
    for order_file in files:
        order = load_json(order_file)
        if order:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
            print(f"[{order['order_id']}] –ö–ª–∏–µ–Ω—Ç: {order['client_id']} | –°—É–º–º–∞: {order['total']} | –°—Ç–∞—Ç—É—Å: {order['status']} | –î–∞—Ç–∞: {order['date']}")

def update_order_status(order_id, new_status):       # ----------- –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ID
    if not validate_id(order_id, "ID –∑–∞–∫–∞–∑–∞"):
        return
        
    order_file = ORDERS_DIR / f"{order_id}.json"

    if not order_file.exists():
        time.sleep(0.5)
        print("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    order = load_json(order_file)
    order["status"] = new_status

    save_json(order_file, order)
    time.sleep(0.5)
    print(f"üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {new_status}.")


# ------------ –ú–µ–Ω—é (–∑–∞–∫–∞–∑—ã) ------------

def order_menu():                                    # ----------- –ú–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤
    while True:
        print("\n---------–ú–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤---------")
        print("1.‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
        print("2.üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
        print("3.üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞")
        print("0.‚ùå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        try:
            choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞: "))
        except ValueError:
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            continue

        if choice == 0:
            time.sleep(0.5)
            print("–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            break

        elif choice == 1:
            order_id = input("ID –∑–∞–∫–∞–∑–∞: ").strip()
            client_id = input("ID –∫–ª–∏–µ–Ω—Ç–∞: ").strip()
            
            if not order_id or not client_id:
                print("‚ùå ID –∑–∞–∫–∞–∑–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.")
                continue

            time.sleep(0.5)
            print("\n-------–¢–µ–∫—É—â–∏–π —Å–∫–ª–∞–¥-------")
            sklad = load_json(SKLAD_FILE)
            for pid, info in sklad.items():
                print(f"[{pid}] {info['name']} | –¶–µ–Ω–∞: {info['price']} | –û—Å—Ç–∞—Ç–æ–∫: {info['quantity']}")

            items = {}
            while True:
                pid = input("\n–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ").strip()
                if pid == "":
                    break
                if pid not in sklad:
                    print("‚ùå –¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç.")
                    continue
                try:
                    qty = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: "))
                    if qty <= 0:
                        print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                        continue
                    items[pid] = qty
                except ValueError:
                    print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
                    continue

            if not items:
                time.sleep(0.5)
                print("‚ùå –ó–∞–∫–∞–∑ –ø—É—Å—Ç, –æ—Ç–º–µ–Ω–∞.")
                continue

            create_order(order_id, client_id, items)

        elif choice == 2:
            show_orders()

        elif choice == 3:
            time.sleep(0.5)
            order_id = input("ID –∑–∞–∫–∞–∑–∞: ").strip()
            new_status = input("–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ").strip()
            if not order_id or not new_status:
                print("‚ùå ID –∑–∞–∫–∞–∑–∞ –∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.")
                continue
            update_order_status(order_id, new_status)